package it.micegroup.voila3sample.mapper;import it.micegroup.voila3sample.dto.EditFornitoreDto;import it.micegroup.voila3sample.dto.ViewFornitoreDto;import it.micegroup.voila3sample.domain.primary.Fornitore;import it.micegroup.voila3sample.domain.primary.Prodotto;import org.mapstruct.AfterMapping;import org.mapstruct.MappingTarget;import org.mapstruct.Mapper;import org.mapstruct.Mapping;import org.springframework.data.domain.Page;import java.util.Optional;/** * Interface used to map DTO Classes to Entity Classes. Usefull to manage object transfered through * this application. */@Mapperpublic interface FornitoreMapper {  /** Maps an EditFornitoreDto to an entity getEntityClassName(aClass)/] */  @Mapping(source = "entityState", target = "entityState")  Fornitore map(EditFornitoreDto fornitoreDto);  /** Maps an entity Fornitore to a ViewFornitoreDto */  ViewFornitoreDto map(Fornitore fornitore);  /** Maps a Page<Fornitore> to a Page<ViewFornitoreDto> */  default Page<ViewFornitoreDto> map(Page<Fornitore> page) {    return page.map(this::map);  }  /*   * Maps an Optional<Fornitore> to an Optional<ViewFornitoreDto>   */  default Optional<ViewFornitoreDto> map(Optional<Fornitore> read) {    return read.map(this::map);  }  /** After mapping a Fornitore, it propagates the object key of the entity in each child */  @AfterMapping  default void propagateKeyInChildren(@MappingTarget Fornitore bean) {    String key = bean.getObjectKey();    if (bean.getTheProdotto() != null) {      for (Prodotto item : bean.getTheProdotto()) {        item.setTheFornitoreObjectKey(key);      }    }  }}
