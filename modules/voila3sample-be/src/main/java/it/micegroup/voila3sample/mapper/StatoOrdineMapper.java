package it.micegroup.voila3sample.mapper;import it.micegroup.voila3sample.dto.EditStatoOrdineDto;import it.micegroup.voila3sample.dto.ViewStatoOrdineDto;import it.micegroup.voila3sample.domain.primary.StatoOrdine;import it.micegroup.voila3sample.domain.primary.Ordine;import org.mapstruct.AfterMapping;import org.mapstruct.MappingTarget;import org.mapstruct.Mapper;import org.mapstruct.Mapping;import org.springframework.data.domain.Page;import java.util.Optional;/** * Interface used to map DTO Classes to Entity Classes. Usefull to manage object transfered through * this application. */@Mapperpublic interface StatoOrdineMapper {  /** Maps an EditStatoOrdineDto to an entity getEntityClassName(aClass)/] */  @Mapping(source = "entityState", target = "entityState")  StatoOrdine map(EditStatoOrdineDto statoOrdineDto);  /** Maps an entity StatoOrdine to a ViewStatoOrdineDto */  ViewStatoOrdineDto map(StatoOrdine statoOrdine);  /** Maps a Page<StatoOrdine> to a Page<ViewStatoOrdineDto> */  default Page<ViewStatoOrdineDto> map(Page<StatoOrdine> page) {    return page.map(this::map);  }  /*   * Maps an Optional<StatoOrdine> to an Optional<ViewStatoOrdineDto>   */  default Optional<ViewStatoOrdineDto> map(Optional<StatoOrdine> read) {    return read.map(this::map);  }  /** After mapping a StatoOrdine, it propagates the object key of the entity in each child */  @AfterMapping  default void propagateKeyInChildren(@MappingTarget StatoOrdine bean) {    String key = bean.getObjectKey();    if (bean.getTheOrdine() != null) {      for (Ordine item : bean.getTheOrdine()) {        item.setTheStatoOrdineObjectKey(key);      }    }  }}
